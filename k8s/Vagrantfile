# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'fileutils'
require 'ipaddr'

CONFIG = File.join(File.dirname(__FILE__), ".config.rb")

SUPPORTED_OS = {
  "almalinux8"      => {box: "almalinux/8",       vm_prefix: "a",   home_dir: "vagrant"},
  "centos7"         => {box: "centos/7",           vm_prefix: "c",   home_dir: "vagrant"},
  "centos8"         => {box: "centos/8",           vm_prefix: "c",   home_dir: "vagrant"},
  "debian10"        => {box: "generic/debian10",  vm_prefix: "d",   home_dir: "vagrant"},
  "debian9"         => {box: "generic/debian9",    vm_prefix: "d",   home_dir: "vagrant"},
  "fedora30"        => {box: "generic/fedora30",   vm_prefix: "f",   home_dir: "vagrant"},
  "fedora31"        => {box: "generic/fedora31",   vm_prefix: "f",   home_dir: "vagrant"},
  "fedora32"        => {box: "generic/fedora32",   vm_prefix: "f",   home_dir: "vagrant"},
  "fedora33"        => {box: "fedora/33-cloud-base",   vm_prefix: "f",   home_dir: "vagrant"},
  "rockylinux8"     => {box: "generic/rocky8",   vm_prefix: "r",   home_dir: "vagrant"},
  "ubuntu1804"      => {box: "generic/ubuntu1804", vm_prefix: "u",   home_dir: "vagrant"},
  "ubuntu2004"      => {box: "generic/ubuntu2004", vm_prefix: "u",   home_dir: "vagrant"},
}

######
# Defaults
######
# Static Variables
$os             = "ubuntu2004"
$num_instances  = 3
$cpus           = 4
$memory         = 4096
$disks          = 1
$disk_size      = "10G"
disk_prefix     = File.basename(File.dirname(__FILE__), "/")
base_ip         = IPAddr.new("10.10.100.10")
hosts           = {}
proxy_ip_list   = ""
driveletters    = ('a'..'z').to_a
autoprovision   = (ENV['AUTOPROVISION'] || false)
contconfig     = (ENV['CONTCONFIG'] || "")
randstrsource   = ("a".."z").to_a + (0..9).to_a
kubetoken = ""; 6.times{ kubetoken += randstrsource[rand(randstrsource.size)].to_s }; kubetoken += '.'; 16.times{ kubetoken += randstrsource[rand(randstrsource.size)].to_s }

# Now override with config from file
if File.exist? (CONFIG)
  require CONFIG
end

# Now variables derived
$num_instances  = (ENV['NODES'] || $num_instances).to_i
$cpus           = (ENV['CPUS'] || $cpus).to_i
$memory         = (ENV['MEMORY'] || $memory).to_i
$disks          = (ENV['DISKS'] || $disks).to_i
$box            = SUPPORTED_OS[$os][:box]
$vm_name_prefix = SUPPORTED_OS[$os][:vm_prefix]
$home_dir       = SUPPORTED_OS[$os][:home_dir]

# Install plugins that you might need.
if ENV['http_proxy'] || ENV['HTTP_PROXY']
  system "vagrant plugin install vagrant-proxyconf" unless Vagrant.has_plugin?("vagrant-proxyconf")
end

if !Vagrant.has_plugin?("vagrant-reload")
  system "vagrant plugin install vagrant-reload"
end

Vagrant.configure("2") do |config|
  config.vm.box = $box

  config.vm.synced_folder './', '/home/' + $home_dir + '/' + File.basename(Dir.getwd), type: 'rsync'

  #Setup proxies for all machines
  (1..$num_instances).each do |i|
    base_ip                                   = base_ip.succ
    hosts["%s-%02d" % [$vm_name_prefix, i]]   = base_ip.to_s
  end

  if ENV['http_proxy'] || ENV['HTTP_PROXY']
    proxy_ip_list = (ENV['no_proxy'] || ENV['NO_PROXY'] || "localhost,127.0.0.1,172.16.10.10,")
    hosts.each do |vm_name, ip|
      proxy_ip_list = ("#{proxy_ip_list},#{vm_name},#{ip}")
    end
  end

  hosts.each do |vm_name, ip|
    config.vm.define vm_name do |c|
      c.vm.hostname = vm_name
      c.vm.network :private_network, ip: ip, autostart: true
      c.vm.provider :libvirt do |lv|
        lv.cpu_mode   = "host-passthrough"
        lv.nested     = true
        lv.cpus       = $cpus
        lv.memory     = $memory
        lv.machine_virtual_size = 40
        if $box['generic/fedora']
          lv.disk_bus="sata"
        end
        (1..$disks).each do |d|
          lv.storage :file, :device => "hd#{driveletters[d]}", :path => "disk-#{disk_prefix}-#{vm_name}-#{d}.disk", :size => $disk_size, :type => "raw"
        end
      end
      if ENV['http_proxy'] || ENV['HTTP_PROXY']
        c.proxy.http      = (ENV['http_proxy']||ENV['HTTP_PROXY'])
        c.proxy.https     = (ENV['https_proxy']||ENV['HTTPS_PROXY'])
        c.proxy.no_proxy  = ("#{proxy_ip_list}")
      end
      case $box
      when /generic.ubuntu/
        c.vm.provision "shell", privileged: false, path: "generic_ubuntu_hack.sh"
      when /generic.debian/
        c.vm.provision "shell", privileged: false, path: "generic_debian_hack.sh"
      when /fedora/
        c.vm.provision "shell", privileged: false, path: "fedora_hack.sh"
      end
      # Fedora32 has cgroups-v2 as default and kubernetes does not work with
      # that. The previous fedora hack script switches kernel command line to
      # enable systemd cgroups. A reboot is required for that change to take
      # effect.
      if $box.include? "fedora32"
        c.vm.provision :reload
      end
      if File.exist? (contconfig)
        c.vm.provision "file", source: contconfig, destination: "/tmp/config.toml"
        c.vm.provision "shell", privileged: true, inline: <<-ESHELL
          mkdir -p /etc/containerd
          mv /tmp/config.toml /etc/containerd/
        ESHELL
      end
      c.vm.provision "shell", privileged: false, path: "setup_system.sh", env:{"KUBE_VERSION" => ENV['KUBE_VERSION'], "CONTD_VER" => ENV['CONTD_VER']}
      if autoprovision
        if c.vm.hostname == hosts.keys[0]
          c.vm.provision "init", type: "shell", privileged: false, env: {"TOKEN" => kubetoken, "CLRK8S_NOPROMPT" => true, "MASTER_IP" => hosts.values[0]}, inline: <<-ESHELL
            /home/vagrant/cloud-native-setup/clr-k8s-examples/create_stack.sh init
            /home/vagrant/cloud-native-setup/clr-k8s-examples/create_stack.sh cni
          ESHELL
        end
        if c.vm.hostname != hosts.keys[0]
          c.vm.provision "join", type: "shell", after: "init", privileged: false, env: {"TOKEN" => kubetoken, "MASTER_IP" => hosts.values[0]}, inline: <<-ESHELL
            sudo -E kubeadm join $MASTER_IP:6443 --token ${TOKEN} --discovery-token-unsafe-skip-ca-verification
          ESHELL
        end
      end
    end
  end
end
